version: '3.7'

x-common-env: &common_env
  PGHOST:     ${PGHOST}
  PGPORT:     ${PGPORT}
  PGDATABASE: ${PGDATABASE}
  PGUSER:     ${PGUSER}
  AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
  AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
  AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
  DB_SECRET_NAME: ${DB_SECRET_NAME}
  LICHESS_TOKEN: ${LICHESS_TOKEN}

services:
  # ──────────────── Postgres ────────────────
  db:
    image: postgres:17
    restart: always
    environment:
      POSTGRES_USER: ${PGUSER:-postgres}
      POSTGRES_PASSWORD: ${PGPASSWORD}
      POSTGRES_DB: ${PGDATABASE:-knightshift}
    ports:
      - "127.0.0.1:15433:5432"
      - "15432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./schemas/init:/docker-entrypoint-initdb.d
    env_file:
      - .env
    networks:
      - knightshift_network

  # ──────────────── KnightShift Pipeline ────────────────
  pipeline:
    build:
      context: ../..
      dockerfile: infra/docker/app.Dockerfile
    depends_on:
      - db
    environment:
      <<: *common_env
      DATABASE_URL: postgresql+psycopg2://${PGUSER}:${PGPASSWORD}@db:5432/${PGDATABASE:-knightshift}
      PYTHONPATH: /app
    volumes:
      - ./logs:/app/logs
      - ./knightshift:/app/knightshift
    # command: ["bash", "scripts/run.sh"]
    env_file:
      - .env
    networks:
      - knightshift_network
    ports:
      - "8001:8000"  # Exposing port 8000 for Prometheus metrics

  # ──────────────── Apache Airflow ────────────────
  airflow:
    build:
      context: ../..
      dockerfile: infra/docker/airflow.Dockerfile
    restart: always
    depends_on: [db]
    environment:
      <<: *common_env
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${PGUSER}:${PGPASSWORD}@db:5432/${PGDATABASE:-knightshift}
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "False"
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__CORE__DEFAULT_TIMEZONE: America/New_York
      RUNNING_IN_DOCKER: "true"
      PYTHONPATH: /app
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./knightshift:/app/knightshift
      # Optional: if you don't need config, omit it or bring it into snapshot
      # - ./config:/app/config
      - ./.env.pipeline:/opt/airflow/.env
    ports:
      - "8081:8080"
    command: >
      bash -c "
        airflow db upgrade &&
        airflow users create -u admin -p admin -f admin -l admin -r Admin -e admin@example.com || true &&
        airflow scheduler & 
        exec airflow webserver --host 0.0.0.0 --port 8080
      "
    env_file:
      - .env
    networks:
      - knightshift_network

  # ──────────────── Prometheus ────────────────
  prometheus:
    image: prom/prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    environment:
      - PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus
    depends_on:
      - fake_pipeline  # Changed from pipeline to fake_pipeline for knightshift_foundation
    networks:
      - knightshift_network

  # ──────────────── Grafana ────────────────
  grafana:
    image: grafana/grafana
    restart: always
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    volumes:
      - ./grafana_backup:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - knightshift_network
    env_file:
      - .env

  # ──────────────── Fake Pipeline for Observability ────────────────
  fake_pipeline:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      INSTANCE_NAME: fake_pipeline:8000
      JOB_NAME: knightshift_foundation
    volumes:
      - ./run.sh:/app/run.sh
      - ./prometheus_metrics.py:/app/prometheus_metrics.py
      - ./requirements.txt:/app/requirements.txt
    command: ["bash", "run.sh"]
    ports:
      - "8000:8000"
    networks:
      - knightshift_network

volumes:
  pg_data: {}
  grafana_data: {}

networks:
  knightshift_network:
    driver: bridge
